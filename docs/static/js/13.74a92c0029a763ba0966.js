webpackJsonp([13],{"7l3K":function(n,r){n.exports="# JS学习记录\r\n\r\n#### 1. var 创建的变量是函数作用域内的，若函数内定义变量的时候省略了 var，则创建的是一个全局变量\r\n```javascript\r\nfunction func1(){\r\n  var name = 'Rana';\r\n}\r\nfunc1();\r\nconsole.log(name); // error\r\n\r\nfunction func2(){\r\n  name = 'Rana';\r\n}\r\nfunc2();\r\nconsole.log(name); // name\r\n```\r\n\r\n#### 2. var 声明提升，使用 var 声明的变量会自动提升到函数作用域的顶部\r\n```javascript\r\nfunction func(){\r\n  console.log(name);\r\n  var name = 'Rana';\r\n}\r\nfunc(); // undefined\r\n\r\n// 因为等价于\r\n\r\nfunction func(){\r\n  var name;\r\n  console.log(name); //undefined\r\n  name = 'Rana';\r\n}\r\nfunc();\r\n```\r\n\r\n#### 3. let 声明的是块级作用域，而 var 声明的是函数作用域。let 不能在同一个块级作用域中重复地声明同一个变量，let 也不会出现变量提升\r\n```javascript\r\nif(true){\r\n  var name = 'Rana';\r\n  console.log(name); // Rana\r\n}\r\nconsole.log(name); // Rana\r\n\r\nif(true){\r\n  let name = 'Rana';\r\n  console.log(name); // Rana\r\n}\r\nconsole.log(name); // error: name is not defined\r\n```\r\n\r\n#### 4. let 声明的变量不会成为 window 的属性，而 var 声明的会\r\n```javascript\r\nvar name = 'Rana';\r\nconsole.log(window.name); // Rana\r\n\r\nlet name = 'Rana';\r\nconsole.log(window.name); //undefined\r\n```\r\n\r\n#### 5. for-in 迭代对象的 key，for-of迭代对象的 value\r\n\r\n#### 6. typeof 的返回值总结：\r\n```javascript\r\nundefined //表示未定义\r\nboolean //表示布尔值\r\nstring //表示字符串\r\nnumber //表示数字\r\nobject //表示对象或者 null\r\nfunction //表示函数\r\nsymbol //表示符号\r\n```\r\n\r\n#### 7. 对未声明的变量，只能进行一个操作：typeof，并返回 undefined\r\n\r\n#### 8. 数值转换\r\n`Number()`，`parseInt()`和`parseFloat()`三个函数都可以做到数值转换\r\n#### `Number()`转换规则：\r\n`true`转为1，`false`转为0\r\n数值，直接返回\r\n`null`，返回0\r\n`undefined`，返回`NaN`\r\n字符串：包含正负号的小数，整数，十六进制数都可以被转为数字，前导0会被省略；空字符串转为0；其他情况都为`NaN`\r\n对象：使用`valueOf()`方法并按照上述规则转换为数字。若转换结果是`NaN`，则调用`toString()`，再按照字符串转换规则转换\r\n```javascript\r\nNumber('Hello') // NaN\r\nNumber('') // 0\r\nNumber('00011') // 11\r\nNumber(true) // 1\r\n```\r\n\r\n#### `parseInt()`转换规则：\r\n`parseInt()`从第一个非空格字符开始，若第一个字符不是数值、正负号，则直接返回`NaN`，即空字符串会返回`NaN`。对于符合数值、正负号的字符，则继续依次检验，直到字符串末尾或者遇到非数值字符\r\n```javascript\r\nparseInt('1234blue') // 1234\r\nparseInt('') // NaN\r\nparseInt('0xA') // 10，解释为十六进制数字\r\nparseInt(22.5) // 22，因为小数点不符合数值、正负号，因此到22就停止检验\r\n```\r\n`parseInt()`可以接收第二个参数表示进制数\r\n\r\n#### `parseFloat()`转换规则：\r\n`parseFloat()`只解析十进制，不能指定进制数；也忽略前导0，其他与`parseInt()`一样\r\n\r\n#### 9. Symbol 类型就是用来创建唯一的记号，进而用作非字符串形式的对象属性。\r\n\r\n#### 10. 前缀加和前缀减变量的值都会在语句被求值之前改变，而后缀加和后缀减则是在求值之后改变\r\n```javascript\r\n// 前缀\r\nlet age = 29;\r\nlet anotherAge = --age + 2\r\nconsole.log(age) // 28\r\nconsole.log(anotherAge) // 30\r\n\r\n// 后缀\r\n```"}});