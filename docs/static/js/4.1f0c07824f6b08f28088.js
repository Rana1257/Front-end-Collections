webpackJsonp([4],{c9W0:function(r,n){r.exports='# 牛客链接地址：https://www.nowcoder.com/ta/coding-interviews\r\n\r\n## 全文67道算法题，涉及一些基本的数据结构与算法。\r\n\r\n## 1.二维数组中的查找\r\n\r\n> 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\r\n\r\n```js\r\nfunction Find(target, array) {\r\n  // write code here\r\n  for (let i = array.length - 1; i >= 0; i--) {\r\n    if (array[i][0] <= target) {\r\n      if (array[i].includes(target)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n```\r\n\r\n## 2.替换空格\r\n\r\n> 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为 We Are Happy.则经过替换之后的字符串为 We%20Are%20Happy。\r\n\r\n```js\r\nfunction replaceSpace(str) {\r\n  // write code here\r\n  return str.replace(/\\s/g, "%20");\r\n}\r\n```\r\n\r\n## 3.从尾到头打印链表\r\n\r\n> 输入一个链表，按链表从尾到头的顺序返回一个 ArrayList。\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\n\r\nfunction printListFromTailToHead(head) {\r\n  // write code here\r\n  var res = [];\r\n  while (head) {\r\n    res.push(head.val);\r\n    head = head.next;\r\n  }\r\n  res.reverse();\r\n  return res;\r\n}\r\n```\r\n\r\n## 4.重建二叉树\r\n\r\n> 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction reConstructBinaryTree(pre, vin) {\r\n  // write code here\r\n  if (pre.length == 0 || vin.length == 0) {\r\n    return null;\r\n  }\r\n  var root = pre[0]; //根节点\r\n  var index = vin.indexOf(root); //在vin中找到根节点的索引\r\n  var left = vin.slice(0, index); //左子树\r\n  var right = vin.slice(index + 1); //右子树\r\n  var node = new TreeNode(root); //新建一个二叉树\r\n  node.left = reConstructBinaryTree(pre.slice(1, index + 1), left); //左子树的前序和中序\r\n  node.right = reConstructBinaryTree(pre.slice(index + 1), right); //右子树的前序和中序\r\n  return node;\r\n}\r\n```\r\n\r\n## 5.用两个栈实现队列\r\n\r\n> 用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作。 队列中的元素为 int 类型。\r\n\r\n```js\r\nconst inStack = [];\r\nconst outStack = [];\r\n\r\nfunction push(node) {\r\n  // write code here\r\n  inStack.push(node);\r\n}\r\n\r\nfunction pop() {\r\n  // write code here\r\n  if (outStack.length) {\r\n    return outStack.pop();\r\n  } else {\r\n    while (inStack.length) {\r\n      outStack.push(inStack.pop());\r\n    }\r\n    return outStack.pop();\r\n  }\r\n}\r\n```\r\n\r\n## 6.旋转数组的最小数字\r\n\r\n> 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。\r\n> 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。\r\n> 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为 1。\r\n> NOTE：给出的所有元素都大于 0，若数组大小为 0，请返回 0。\r\n\r\n> 方法一：二分查找法\r\n\r\n```js\r\nfunction minNumberInRotateArray(rotateArray) {\r\n  // write code here\r\n  if (!rotateArray.length) return 0;\r\n  var left = 0;\r\n  var right = rotateArray.length - 1;\r\n  while (left + 1 < right) {\r\n    var mid = Math.floor((left + right) / 2);\r\n    if (rotateArray[mid] >= rotateArray[left]) {\r\n      left = mid;\r\n    } else {\r\n      right = mid;\r\n    }\r\n  }\r\n  return rotateArray[right];\r\n}\r\n```\r\n\r\n> 方法二：扩展运算符\r\n\r\n```js\r\nfunction minNumberInRotateArray(rotateArray) {\r\n  // write code here\r\n  if (!rotateArray.length) {\r\n    return 0;\r\n  } else {\r\n    return Math.min(...rotateArray);\r\n  }\r\n}\r\n```\r\n\r\n## 7.斐波那契数列\r\n\r\n> 大家都知道斐波那契数列，现在要求输入一个整数 n，请你输出斐波那契数列的第 n 项（从 0 开始，第 0 项为 0）。(n<=39)\r\n\r\n> 方法一：\r\n\r\n```js\r\nfunction Fibonacci(n) {\r\n  if (n == 0 || n == 1) {\r\n    return n;\r\n  }\r\n  var arr = [0, 1];\r\n  for (var i = 2; i <= n; i++) {\r\n    arr.push(arr[arr.length - 1] + arr[arr.length - 2]);\r\n  }\r\n  return arr[n];\r\n}\r\n```\r\n\r\n> 方法二：\r\n\r\n```js\r\nfunction Fibonacci(n) {\r\n  // write code here\r\n  if (n == 0 || n == 1) {\r\n    return n;\r\n  }\r\n  let triple = [0, 0, 1];\r\n  for (let i = 2; i <= n; i++) {\r\n    triple[0] = triple[1];\r\n    triple[1] = triple[2];\r\n    triple[2] = triple[0] + triple[1];\r\n  }\r\n  return triple[2];\r\n}\r\n```\r\n\r\n## 8.跳台阶\r\n\r\n> 一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法（先后次序不同算不同的结果）。\r\n\r\n> 解题思路：\r\n>\r\n> 这题其实就是在求斐波那契数列。理解起来也很简单。假设跳到 n 级台阶有 f(n)种方法。根据题目，青蛙在跳上 n 级时有 2 种方法：\r\n>\r\n> - 从 n - 1 级跳 1 级上来\r\n> - 从 n - 2 级跳 2 级上来\r\n>\r\n> 青蛙跳到 n- 1 级有 f(n-1)种方法，跳到 n- 2 级有 f(n-2)种方法。所以 f(n) = f(n - 1) + f(n - 2)。这就是斐波那契数列的定义式。\r\n\r\n```js\r\nfunction jumpFloor(number) {\r\n  // write code here\r\n  if (number == 1) {\r\n    return 1;\r\n  }\r\n  if (number == 2) {\r\n    return 2;\r\n  }\r\n  let arr = [0, 1, 2];\r\n  for (let i = 3; i <= number; i++) {\r\n    arr[0] = arr[1];\r\n    arr[1] = arr[2];\r\n    arr[2] = arr[0] + arr[1];\r\n  }\r\n  return arr[2];\r\n}\r\n```\r\n\r\n## 9.变态跳台阶\r\n\r\n> 一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级……它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\r\n\r\n> 解题思路：\r\n>\r\n> 假设跳 n 级台阶的跳法数量是 f(n)个。假设跳 n 级台阶的跳法数量是 f(n)个。\r\n>\r\n> 那么根据题意，青蛙可能从 n-1 级直接跳上来，也可能从 n-2 级直接跳上来，依次类推：f(n) = f(n - 1) + f(n - 2) + ... + f(1)\r\n>\r\n> 同理：f(n - 1) = f(n - 2) + f(n - 3) + ... + f(1)\r\n>\r\n> f(n) = 2 \\* f(n - 1) = 4 \\* f(n - 2) = ... = 2 \\^ (n - 1)f(1)\r\n>\r\n> 其中： f(1) = 1\r\n\r\n```js\r\nfunction jumpFloorII(number) {\r\n  // write code here\r\n  return Math.pow(2, number - 1);\r\n}\r\n```\r\n\r\n## 10.矩形覆盖\r\n\r\n> 我们可以用 2*1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2*1 的小矩形无重叠地覆盖一个 2\\*n 的大矩形，总共有多少种方法？\r\n>\r\n> 比如 n=3 时，2\\*3 的矩形块有 3 种覆盖方法：\r\n>\r\n> ![矩阵覆盖](./img/矩阵覆盖.png)\r\n\r\n```js\r\nfunction rectCover(number) {\r\n  // write code here\r\n  if (number <= 0) {\r\n    return 0;\r\n  }\r\n  if (number == 1) {\r\n    return 1;\r\n  }\r\n  if (number == 2) {\r\n    return 2;\r\n  }\r\n  let arr = [0, 1, 2];\r\n  for (let i = 3; i <= number; i++) {\r\n    arr[0] = arr[1];\r\n    arr[1] = arr[2];\r\n    arr[2] = arr[0] + arr[1];\r\n  }\r\n  return arr[2];\r\n}\r\n```\r\n\r\n## 11.二进制中 1 的个数\r\n\r\n> 输入一个整数，输出该数二进制表示中 1 的个数。其中负数用补码表示。\r\n\r\n> 解题思路：\r\n>\r\n> 如果一个整数不为 0，那么这个整数至少有一位是 1。如果我们把这个整数减 1，那么原来处在整数最右边的 1 就会变为 0，原来在 1 后面的所有的 0 都会变成 1(如果最右边的 1 后面还有 0 的话)。其余所有位将不会受到影响。\r\n>\r\n> 举个例子：一个二进制数 1100，从右边数起第三位是处于最右边的一个 1。减去 1 后，第三位变成 0，它后面的两位 0 变成了 1，而前面的 1 保持不变，因此得到的结果是 1011.我们发现减 1 的结果是把最右边的一个 1 开始的所有位都取反了。这个时候如果我们再把原来的整数和减去 1 之后的结果做与运算，从原来整数最右边一个 1 那一位开始所有位都会变成 0。如 1100&1011=1000.也就是说，把一个整数减去 1，再和原整数做与运算，会把该整数最右边一个 1 变成 0.那么一个整数的二进制有多少个 1，就可以进行多少次这样的操作。\r\n\r\n```js\r\nfunction NumberOf1(n) {\r\n  // write code here\r\n  let count = 0;\r\n  while (n != 0) {\r\n    count++;\r\n    n = n & (n - 1); // 与操作自动将数转换成二进制\r\n  }\r\n  return count;\r\n}\r\n```\r\n\r\n## 12.数值的整数次方\r\n\r\n> 给定一个 double 类型的浮点数 base 和 int 类型的整数 exponent。求 base 的 exponent 次方。保证 base 和 exponent 不同时为 0.\r\n\r\n```js\r\nfunction Power(base, exponent) {\r\n  // write code here\r\n  return base ** exponent;\r\n}\r\n```\r\n\r\n## 13.调整数组顺序使奇数位于偶数前面\r\n\r\n> 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。\r\n\r\n```js\r\nfunction reOrderArray(array) {\r\n  // write code here\r\n  let arr1 = []; //奇数\r\n  let arr2 = []; //偶数\r\n  array.forEach(ele => {\r\n    if (ele % 2 == 1) {\r\n      arr1.push(ele);\r\n    } else {\r\n      arr2.push(ele);\r\n    }\r\n  });\r\n  return arr1.concat(arr2);\r\n}\r\n```\r\n\r\n## 14.链表中倒数第 k 个结点\r\n\r\n> 输入一个链表，输出该链表中倒数第 k 个结点。\r\n\r\n> 解题思路 1：\r\n>\r\n> 因为要求链表倒数第 k 个节点，也就是求正数第 length - k 个节点。整体过程如下：\r\n>\r\n> - 链表又是个单链表，并且没有保存长度信息。所以需要循环一次计算 length。\r\n> - 第二次循环找到第 length - k 个节点。\r\n>\r\n> 时间复杂度是 O(N)，需要 2 次循环。\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\n\r\nfunction FindKthToTail(head, k) {\r\n  // write code here\r\n  let length = 0;\r\n  let node = head;\r\n  while (node) {\r\n    length++;\r\n    node = node.next;\r\n  }\r\n  if (k > length) {\r\n    return null;\r\n  }\r\n  let offset = length - k;\r\n  node = head;\r\n  for (let i = 0; i < offset; i++) {\r\n    node = node.next;\r\n  }\r\n  return node;\r\n}\r\n```\r\n\r\n> 解题思路 2：\r\n\r\n> 准备两个指针：left（慢）和 right（快）。整体过程如下：\r\n>\r\n> - right 先向右移动 k 位，此时 index(right) - index(left) = k\r\n> - left 和 right 一起向右移动，直到 right 抵达边界\r\n> - 由于 index(right) - index(left) = k，所以 index(left) = index(right) - k = length - k。也就是 left 指针移动到了倒数第 k 个位置\r\n>\r\n> 时间复杂度是 O(N)，但仅需要遍历一次。空间复杂度是 O（1）\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\n\r\nfunction FindKthToTail(head, k) {\r\n  let right = head;\r\n  for (let i = 0; i < k; ++i) {\r\n    if (right === null) {\r\n      // 链表长度小于k\r\n      return null;\r\n    }\r\n    right = right.next;\r\n  }\r\n\r\n  let left = head;\r\n  while (right) {\r\n    left = left.next;\r\n    right = right.next;\r\n  }\r\n\r\n  return left;\r\n}\r\n```\r\n\r\n## 15.反转链表\r\n\r\n> 输入一个链表，反转链表后，输出新链表的表头。\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\nfunction ReverseList(pHead) {\r\n  // write code here\r\n  let prev = null; // 上一个节点\r\n  while (pHead) {\r\n    curr = pHead; // 当前节点\r\n    pHead = pHead.next;\r\n    curr.next = prev;\r\n    prev = curr;\r\n  }\r\n  return prev;\r\n}\r\n```\r\n\r\n## 16.合并两个排序的链表\r\n\r\n> 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\r\n\r\n> 解题思路：\r\n> 设置一个“哨兵节点”叫 pHead，整体流程如下：\r\n>\r\n> - 如果 pHead1 和 pHead2，均没遍历完：\r\n>\r\n> - - 如果 pHead1.val <= pHead2.val，那么当前 node 的 next 指向 pHead1。并且移动 pHead1 指针。\r\n>\r\n> - - 否则，当前 node 的 next 指向 pHead2，移动 pHead2 指针。\r\n>\r\n> - - 移动 node 指针\r\n>\r\n> - - 继续循环\r\n>\r\n> - 否则，结束循环：\r\n>\r\n> - - 如果 pHead1 未遍历完，node 的 next 指向 pHead1\r\n>\r\n> - - 如果 pHead2 未遍历玩，node 的 next 指向 pHead2\r\n>\r\n> 时间复杂度是 O(N)，空间复杂度是 O(1)。代码如下：\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\nfunction Merge(pHead1, pHead2) {\r\n  // write code here\r\n  if (!pHead1) {\r\n    // 如果pHead1链表不存在，就返回pHead2\r\n    return pHead2;\r\n  }\r\n  if (!pHead2) {\r\n    // 如果pHead2链表不存在，就返回pHead1\r\n    return pHead1;\r\n  }\r\n\r\n  let pHead = new ListNode(-1); // 新建一个‘哨兵节点’\r\n  let node = pHead; // 头节点的指针\r\n\r\n  while (pHead1 && pHead2) {\r\n    // pHead1 和 pHead2 都存在时\r\n    if (pHead1.val <= pHead2.val) {\r\n      node.next = pHead1;\r\n      pHead1 = pHead1.next;\r\n    } else {\r\n      node.next = pHead2;\r\n      pHead2 = pHead2.next;\r\n    }\r\n    node = node.next;\r\n  }\r\n\r\n  if (pHead1) {\r\n    // pHead1 链表长度大于 pHead2\r\n    node.next = pHead1;\r\n  }\r\n  if (pHead2) {\r\n    // pHead2 链表长度大于 pHead1\r\n    node.next = pHead2;\r\n  }\r\n  return pHead.next; // pHead是-1，所以是pHead.next\r\n}\r\n```\r\n\r\n## 17.树的子结构\r\n\r\n> 输入两棵二叉树 A，B，判断 B 是不是 A 的子结构。（ps：我们约定空树不是任意一个树的子结构）\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction HasSubtree(pRoot1, pRoot2) {\r\n  // 当pRoot2的根节点与pRoot1的根节点不同时就需要对pRoot1的左右子树进行遍历\r\n  // write code here\r\n  if (pRoot1 == null || pRoot2 == null) {\r\n    // pRoot1 pRoot2 有一个为null，结构就为false\r\n    return false;\r\n  }\r\n  return (\r\n    judgeSubtree(pRoot1, pRoot2) || // pRoot2是不是pRoot1的子结构\r\n    HasSubtree(pRoot1.left, pRoot2) || // pRoot1的左子树中有没有pRoot2\r\n    HasSubtree(pRoot1.right, pRoot2) // pRoot1的右子树中有没有pRoot2\r\n  );\r\n}\r\nfunction judgeSubtree(root1, root2) {\r\n  // 对root2进行遍历判断root2 是不是root1 的子结构\r\n  if (!root2) {\r\n    return true;\r\n  }\r\n  if (!root1) {\r\n    return false;\r\n  }\r\n  if (root1.val !== root2.val) {\r\n    return judgeSubtree(root1.left, root2) || judgeSubtree(root1.right, root2);\r\n  }\r\n  return (\r\n    judgeSubtree(root1.left, root2.left) &&\r\n    judgeSubtree(root1.right, root2.right)\r\n  );\r\n}\r\n```\r\n\r\n## 18.二叉树的镜像\r\n\r\n> 操作给定的二叉树，将其变换为源二叉树的镜像。\r\n>\r\n> ![二叉树的镜像](./img/二叉树的镜像.png)\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n  this.val = x;\r\n  this.left = null;\r\n  this.right = null;\r\n} */\r\n\r\nfunction Mirror(root) {\r\n  // write code here\r\n  if (!root) {\r\n    return;\r\n  }\r\n  [root.left, root.right] = [root.right, root.left];\r\n  Mirror(root.left);\r\n  Mirror(root.right);\r\n  return root;\r\n}\r\n```\r\n\r\n## 19.顺时针打印矩阵\r\n\r\n> 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下 4 X 4 矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字 1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.\r\n>\r\n> 解题思路：\r\n>\r\n> 怎么找到标记点？对于每一层来说，设左上角的元素坐标为 (i, j)，那么右上角的元素坐标为 (i, n - j - 1)，右下角的元素坐标是 (m - i - 1 ,n - j - 1)，左下角的元素坐标是 (m - i - 1, j)。找到标记点后，就是对行/列进行+/-的过程。\r\n\r\n> 怎么防止重复遍历？找到四个坐标点后，每一层的遍历可以拆分成 4 个部分。\r\n> ![顺时针打印矩阵](./img/顺时针打印矩阵.png)\r\n\r\n```js\r\nfunction printMatrix(matrix) {\r\n  // write code here\r\n  let m = matrix.length;\r\n  let n = matrix[0].length; //m和n代表矩阵的行数和列数\r\n  if (!m || !n) {\r\n    return [];\r\n  }\r\n  let res = [];\r\n  let i = 0;\r\n  let j = 0; //(i,j)表示左上角的那个坐标\r\n  while (i <= m - 1 - i && j <= n - 1 - j) {\r\n    for (let col = j; col <= n - 1 - j; col++) {\r\n      res.push(matrix[i][col]); //第一行\r\n    }\r\n\r\n    for (let row = i + 1; row <= m - 1 - i; row++) {\r\n      res.push(matrix[row][n - 1 - j]); //最后一列\r\n    }\r\n    if (i < m - i - 1 && j < n - j - 1) {\r\n      for (let col = n - j - 2; col >= j + 1; col--) {\r\n        res.push(matrix[m - i - 1][col]);\r\n      }\r\n\r\n      for (let row = m - i - 1; row >= i + 1; row--) {\r\n        res.push(matrix[row][j]);\r\n      }\r\n    }\r\n    i++;\r\n    j++;\r\n  }\r\n  return res;\r\n}\r\n```\r\n\r\n## 20.包含 min 函数的栈\r\n\r\n> 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的 min 函数（时间复杂度应为 O（1））。\r\n>\r\n> 注意：保证测试中不会当栈为空的时候，对栈调用 pop()或者 min()或者 top()方法。\r\n\r\n```js\r\nconst dataStack = []; // 栈\r\nconst minStack = []; // 存储栈中最小的元素\r\n\r\nfunction push(node) {\r\n  // write code here\r\n  dataStack.push(node);\r\n  const length = minStack.length;\r\n  if (!length) {\r\n    minStack.push(node);\r\n  } else if (node <= minStack[length - 1]) {\r\n    //每当push一个node，判断这个node：如果不大于minStack中最后一个值，\r\n    //就存入minStack，等号是为了防止push栈中相同的值\r\n    minStack.push(node);\r\n  }\r\n}\r\nfunction pop() {\r\n  // write code here\r\n  if (dataStack[dataStack.length - 1] === minStack[minStack.length - 1]) {\r\n    minStack.pop();\r\n  }\r\n  return dataStack.pop();\r\n}\r\nfunction top() {\r\n  // write code here\r\n  return dataStack[dataStack.length - 1];\r\n}\r\nfunction min() {\r\n  // write code here\r\n  return minStack[minStack.length - 1];\r\n}\r\n```\r\n\r\n## 21.栈的压入、弹出序列\r\n\r\n> 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列 1,2,3,4,5 是某栈的压入顺序，序列 4,5,3,2,1 是该压栈序列对应的一个弹出序列，但 4,3,5,1,2 就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\r\n\r\n> 解题思路：\r\n>\r\n> 需要一个辅助栈，来模拟出入栈的过程。算法流程如下：\r\n>\r\n> - 取压入队列的首元素，将其压入辅助栈\r\n> - 检查辅助栈顶元素是否和弹出队列的首元素相等：\r\n> - - 若相等，则辅助栈弹出栈顶元素，弹出队列取出队首元素，重复检查\r\n> - - 若不相等，回到第一步\r\n> - 最后，检查辅助栈和弹出队列是否均为空。\r\n>\r\n> 时间复杂度是 O(N^2)，空间复杂度是 O(N)。\r\n\r\n```js\r\nfunction IsPopOrder(pushV, popV) {\r\n  // write code here\r\n  const stack = []; //辅助栈\r\n  pushV.forEach(v => {\r\n    if (v === popV[0]) {\r\n      popV.shift(); //  弹出首部元素\r\n      let i = 0;\r\n      const len = popV.length;\r\n      for (; i < len; i++) {\r\n        if (stack[stack.length - 1] === popV[i]) {\r\n          stack.pop();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      popV.splice(0, i);\r\n    } else {\r\n      stack.push(v);\r\n    }\r\n  });\r\n  return !stack.length && !popV.length;\r\n}\r\n```\r\n\r\n## 22.从上往下打印二叉树\r\n\r\n> 从上往下打印出二叉树的每个节点，同层节点从左至右打印。\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction PrintFromTopToBottom(root) {\r\n  // write code here\r\n  const nodes = []; //存放节点\r\n  const values = []; //存放节点的val\r\n  if (root === null) {\r\n    return false;\r\n  }\r\n  nodes.push(root);\r\n  while (nodes && nodes.length > 0) {\r\n    var node = nodes.shift();\r\n    values.push(node.val);\r\n    if (node.left) {\r\n      nodes.push(node.left);\r\n    }\r\n    if (node.right) {\r\n      nodes.push(node.right);\r\n    }\r\n  }\r\n  return values;\r\n}\r\n```\r\n\r\n## 23.二叉搜索树的后序遍历序列\r\n\r\n> 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出 true,否则输出 false。假设输入的数组的任意两个数字都互不相同。\r\n\r\n```js\r\n/*\r\n在二叉搜索树中：\r\n1.若任意结点的左子树不空，则左子树上所有结点的值均不大于它的根结点的值。\r\n2. 若任意结点的右子树不空，则右子树上所有结点的值均不小于它的根结点的值。\r\n3.任意结点的左、右子树也分别为二叉搜索树。\r\n*/\r\nfunction VerifySquenceOfBST(sequence) {\r\n  // write code here\r\n  if (!sequence || !sequence.length) {\r\n    return false;\r\n  }\r\n  return __VerifySquenceOfBST(sequence);\r\n}\r\n\r\nfunction __VerifySquenceOfBST(sequence) {\r\n  const len = sequence.length;\r\n  if (len < 2) return true;\r\n  const root = sequence[len - 1];\r\n  let i = 0;\r\n  for (; i < len - 1 && sequence[i] < root; i++) {} //left的数量是i，0 -> i-1\r\n  for (let j = i; j < len - 1; j++) {\r\n    if (sequence[j] < root) {\r\n      return false;\r\n    }\r\n  }\r\n  return (\r\n    __VerifySquenceOfBST(sequence.slice(0, i)) &&\r\n    __VerifySquenceOfBST(sequence.slice(i, len - 1))\r\n  );\r\n}\r\n```\r\n\r\n## 24.二叉树中和为某一值的路径\r\n\r\n> 输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的 list 中，数组长度大的数组靠前)\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction FindPath(root, expectNumber) {\r\n  // write code here\r\n  var result = [];\r\n  if (root === null) {\r\n    return result;\r\n  }\r\n  dfsFind(root, expectNumber, [], 0, result);\r\n  return result;\r\n}\r\n\r\nfunction dfsFind(root, expectNumber, path, sum, result) {\r\n  sum += root.val;\r\n  path.push(root.val);\r\n  if (sum === expectNumber && root.left === null && root.right === null) {\r\n    result.push(path.slice(0)); //不知道为什么不能直接push(path),想不通\r\n  }\r\n  if (root.left !== null) {\r\n    dfsFind(root.left, expectNumber, path, sum, result);\r\n  }\r\n  if (root.right !== null) {\r\n    dfsFind(root.right, expectNumber, path, sum, result);\r\n  }\r\n  path.pop();\r\n}\r\n```\r\n\r\n## 25.复杂链表的复制\r\n\r\n> 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的 head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）\r\n\r\n> 解题思路：\r\n>\r\n> 按照正常的思路，首先从头到尾遍历链表，拷贝每个节点的 value 和 next 指针。然后从头再次遍历，第二次遍历的目的在于拷贝每个节点的 sibling 指针。\r\n>\r\n> 然而即使找到原节点的 sibling 指针，还是得为了找到复制节点对应的 sibling 指针而再遍历一遍。那么对于 n 个要寻找 sibling 指针的节点，复杂度就是 O(N\\*N)。\r\n>\r\n> 显然，为了降低复杂度，必须从第二次遍历着手。这里采用的方法是，在第一次遍历的时候，把 (原节点, 复制节点) 作为映射保存在表中。那么第二次遍历的时候，就能在 O(1) 的复杂度下立即找到原链上 sibling 指针在复制链上对应的映射。\r\n\r\n```js\r\n/*function RandomListNode(x){\r\n    this.label = x;\r\n    this.next = null;\r\n    this.random = null;\r\n}*/\r\n\r\nfunction Clone(pHead) {\r\n  // write code here\r\n  if (!pHead || !pHead.next) {\r\n    return pHead;\r\n  }\r\n  const map = new Map();\r\n  let node = pHead;\r\n  const newHead = new RandomListNode(node.label);\r\n  let newNode = newHead;\r\n  map.set(node, newNode);\r\n\r\n  while (node.next) {\r\n    newNode.next = new RandomListNode(node.next.label);\r\n    node = node.next;\r\n    newNode = newNode.next;\r\n    map.set(node, newNode);\r\n  }\r\n  newNode = newHead;\r\n  node = pHead;\r\n  while (newNode) {\r\n    newNode.random = map.get(node.random);\r\n    newNode = newNode.next;\r\n    node = node.next;\r\n  }\r\n  return newHead;\r\n}\r\n```\r\n\r\n## 26.二叉搜索树与双向链表\r\n\r\n> 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。\r\n\r\n> 方法一：递归+数组\r\n>\r\n> 解题思路：\r\n>\r\n> - 中序遍历一遍二叉搜索树，将节点保存在一个数组中。\r\n> - 遍历数组，更改每个节点的 left 和 right\r\n> - 返回数组第一个元素\r\n\r\n> 时间复杂度是 O(N)，空间复杂度是 O(N)。相较于方法二，多开辟了 O(N)的数组空间。\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\nfunction Convert(pRootOfTree) {\r\n  // write code here\r\n  if (!pRootOfTree) {\r\n    return null;\r\n  }\r\n  const nodes = [];\r\n  midTravel(pRootOfTree, nodes);\r\n  const len = nodes.length;\r\n  for (let i = 0; i < len; i++) {\r\n    nodes[i].right = nodes[i + 1] || null;\r\n    nodes[i].left = nodes[i - 1] || null;\r\n  }\r\n  return nodes[0];\r\n}\r\n\r\n//中序遍历,将所有节点存在nodes中\r\nfunction midTravel(node, nodes) {\r\n  if (node.left) {\r\n    midTravel(node.left, nodes);\r\n  }\r\n  nodes.push(node);\r\n  if (node.right) {\r\n    midTravel(node.right, nodes);\r\n  }\r\n}\r\n```\r\n\r\n> 方法二：一次递归\r\n> 二叉搜索树的性质是：左节点 < 当前节点 < 右节点。转换后的双向链表是有序的，这里采用中序递归遍历保证有序性。\r\n>\r\n> 设计的递归函数返回的是：已转换好的双向链表的尾结点，也就是当前节点的 left 指针应该指向的地方。递归函数的实现思路：\r\n>\r\n> - 检查 left 是否为空，不为空，那么递归调用（传入左子树）\r\n> - 将 left 指针指向已转换好的双向链表的尾结点，并将尾节点的 right 指向当前节点\r\n> - 更新双向链表尾节点（变为当前节点），检查 right 是否为空，不为空，递归调用传入右子树）\r\n> - 返回转换后的双向链表尾节点\r\n\r\n> 整个过程的要递归遍历一遍二叉树，时间复杂度是 O(N)，空间复杂度是 O(N)。\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction Convert(pRootOfTree) {\r\n  if (!pRootOfTree) {\r\n    return null;\r\n  }\r\n  __Convert(pRootOfTree, null);\r\n  let node = pRootOfTree;\r\n  while (node.left) {\r\n    node = node.left;\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction __Convert(pRootOfTree, lastNodeInList = null) {\r\n  if (!pRootOfTree) {\r\n    return null;\r\n  }\r\n  // step1:左子树\r\n  if (pRootOfTree.left) {\r\n    lastNodeInList = __Convert(pRootOfTree.left, lastNodeInList);\r\n  }\r\n  // step2:当前节点\r\n  pRootOfTree.left = lastNodeInList;\r\n  if (lastNodeInList) {\r\n    lastNodeInList.right = pRootOfTree;\r\n  }\r\n  // step3:右子树\r\n  lastNodeInList = pRootOfTree;\r\n  if (pRootOfTree.right) {\r\n    lastNodeInList = __Convert(pRootOfTree.right, lastNodeInList);\r\n  }\r\n\r\n  return lastNodeInList;\r\n}\r\n```\r\n\r\n## 27.字符串的排列\r\n\r\n> 输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串 abc,则打印出由字符 a,b,c 所能排列出来的所有字符串 abc,acb,bac,bca,cab 和 cba。\r\n>\r\n> 输入描述：输入一个字符串,长度不超过 9(可能有字符重复),字符只包括大小写字母。\r\n\r\n> 解题思路：\r\n>\r\n> abc 的所有组合可以这么理解：\r\n>\r\n> 每次取一个字符出来，比如\'a\'，然后剩下的字符组合成\'bc\'，\'bc\'的所有组合可以通过递归来获取，在 bc 的所有组合前面都拼接一个字符\'a\'；\r\n>\r\n> 再取出字符\'b\'，剩下的字符拼接成\'ac\'，同样的方法：\'ac\'的组合可以通过递归，在\'ac\'的所有组合前面都拼接一个字符\'b\'，\r\n>\r\n> 依次类推...\r\n>\r\n> 但是要**注意**：每次取出来的字符不能与前面的字符相同，所有用一个数组 map 来记录每次取出来的值\r\n\r\n```js\r\nfunction Permutation(str) {\r\n  // write code here\r\n  var arr = [];\r\n  if (str.length === 0) return [];\r\n  if (str.length === 1) {\r\n    arr.push(str);\r\n  } else {\r\n    var map = []; //用来判断是不是每次取出来的字符与前面取出来的是否有重复\r\n    for (let i = 0; i < str.length; i++) {\r\n      var s = str[i]; // 索引为i的字符\r\n      if (!map.includes(s)) {\r\n        var st = str.slice(0, i) + str.slice(i + 1); // 剩下的字符拼接成一个新字符\r\n        var a = Permutation(st); // 递归，找出新字符的排列组合\r\n        a.forEach(ele => arr.push(s + ele));\r\n      }\r\n      map.push(s); //把s加入到map中\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n```\r\n\r\n## 28.数组中出现次数超过一半的数字\r\n\r\n> 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为 9 的数组[1,2,3,2,2,2,5,4,2]。由于数字 2 在数组中出现了 5 次，超过数组长度的一半，因此输出 2。如果不存在则输出 0。\r\n\r\n```js\r\nfunction MoreThanHalfNum_Solution(numbers) {\r\n  // write code here\r\n  var len = numbers.length;\r\n  var obj = {};\r\n  numbers.forEach(item => {\r\n    if (!obj[item]) {\r\n      obj[item] = 1;\r\n    } else {\r\n      obj[item]++;\r\n    }\r\n  });\r\n  for (let key in obj) {\r\n    if (obj[key] > len / 2) {\r\n      return key;\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n```\r\n\r\n## 29.最小的 K 个数\r\n\r\n> 输入 n 个整数，找出其中最小的 K 个数。例如输入 4,5,1,6,2,7,3,8 这 8 个数字，则最小的 4 个数字是 1,2,3,4,。\r\n\r\n> 方法一：快排\r\n\r\n```js\r\nfunction GetLeastNumbers_Solution(input, k) {\r\n  // write code here\r\n  if (k > input.length) return [];\r\n  quickSort(input);\r\n  return input.slice(0, k);\r\n}\r\n\r\nfunction quickSort(input, left = 0, right = input.length - 1) {\r\n  if (left >= right) return;\r\n  var baseId = left;\r\n  var baseVal = input[baseId];\r\n  var i = left;\r\n  var j = right;\r\n  while (i < j) {\r\n    while (j > i && input[j] >= baseVal) {\r\n      j--;\r\n    }\r\n    while (i < j && input[i] <= baseVal) {\r\n      i++;\r\n    }\r\n    [input[i], input[j]] = [input[j], input[i]];\r\n  }\r\n  [input[baseId], input[j]] = [input[j], input[baseId]];\r\n  quickSort(input, left, j - 1);\r\n  quickSort(input, j + 1, right);\r\n  return input;\r\n}\r\n```\r\n\r\n> 方法二：冒泡排序\r\n\r\n```js\r\nfunction GetLeastNumbers_Solution(input, k) {\r\n  // write code here\r\n  if (k > input.length) return [];\r\n  for (let j = input.length - 1; j >= input.length - k; j--) {\r\n    for (let i = 0; i < j; i++) {\r\n      if (input[i] < input[i + 1]) {\r\n        [input[i], input[i + 1]] = [input[i + 1], input[i]];\r\n      }\r\n    }\r\n  }\r\n  var res = [];\r\n  while (k > 0) {\r\n    res.push(input.pop());\r\n    k--;\r\n  }\r\n  return res;\r\n}\r\n```\r\n\r\n> 方法三：sort 排序\r\n\r\n```js\r\nfunction GetLeastNumbers_Solution(input, k) {\r\n  // write code here\r\n  if (input.length < k) {\r\n    return [];\r\n  }\r\n  input.sort((a, b) => a - b);\r\n  return input.slice(0, k);\r\n}\r\n```\r\n\r\n## 30.连续子数组的最大和\r\n\r\n> HZ 偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为 8(从第 0 个开始,到第 3 个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是 1)\r\n\r\n```js\r\n/*\r\n举例：array = [1, -2, 3, 10, -4, 7, 2, -5]\r\n初始化 max = 1, temp = 1\r\ni = 1时， temp = -1, max = 1\r\ni = 2时， temp = 3,  max = 3\r\ni = 3时， temp = 13, max = 13\r\ni = 4时， temp = 9 , max = 13\r\ni = 5时， temp = 16, max = 16\r\ni = 6时， temp = 18, max = 18\r\ni = 7时， temp = 13, max = 18;\r\n*/\r\n\r\nfunction FindGreatestSumOfSubArray(array) {\r\n  // write code here\r\n  var max = array[0],\r\n    temp = array[0];\r\n  for (let i = 1; i < array.length; i++) {\r\n    if (temp <= 0) {\r\n      temp = array[i];\r\n    } else {\r\n      temp += array[i];\r\n    }\r\n    if (temp > max) {\r\n      max = temp;\r\n    }\r\n  }\r\n  return max;\r\n}\r\n```\r\n\r\n## 31.整数中 1 出现的次数（从 1 到 n 整数中 1 出现的次数）\r\n\r\n> 求出 1~13 的整数中 1 出现的次数,并算出 100~1300 的整数中 1 出现的次数？为此他特别数了一下 1~13 中包含 1 的数字有 1、10、11、12、13 因此共出现 6 次,但是对于后面问题他就没辙了。ACMer 希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中 1 出现的次数（从 1 到 n 中 1 出现的次数）。\r\n\r\n> 方法一：对于每个数来说求个位只需对 10 取余(%10)，然后将原数除以 10 取整，再对 10 取余拿到十位...依次类推\r\n\r\n```js\r\nfunction NumberOf1Between1AndN_Solution(n) {\r\n  // write code here\r\n  var count = 0;\r\n  for (let i = n; i > 0; i--) {\r\n    for (let j = i; j > 0; j = parseInt(j / 10)) {\r\n      //对j/10取整\r\n      if (j % 10 === 1) {\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n  return count;\r\n}\r\n```\r\n\r\n> 方法二：笨方法，将 1 到 n 转换成字符串拼接起来，计算 1 的个数\r\n\r\n```js\r\nfunction NumberOf1Between1AndN_Solution(n) {\r\n  // write code here\r\n  var str = "";\r\n  for (let i = 0; i <= n; i++) {\r\n    str += i;\r\n  }\r\n  var res = str.split("").filter(ele => ele === "1");\r\n  return res.length;\r\n}\r\n```\r\n\r\n## 32.把整数排成最小的数\r\n\r\n> 输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为 321323。\r\n\r\n> 解题思路：\r\n>\r\n> 将数组中的数字连接起来，排成一个最小的数字。将\'大数\'往后放\'小数\'往前放，如何定义\'大数\'和\'小数\'？比如说有两个数 a 和 b，如果 ab>ba 则 a 是\'大数\'b 是\'小数\'，要排成 ba。\r\n>\r\n> 于是，这道题目变成了一个排序问题，将能把组合出来的数字变大的数字往后排。我们这里需要自己定义一个比大小的比较方法。用冒泡排序，可以解决此题。\r\n\r\n```js\r\nfunction PrintMinNumber(numbers) {\r\n  // write code here\r\n  numbers.sort((a, b) => {\r\n    return "" + a + b > "" + b + a ? 1 : -1; // ab 和 ba ASCII码值大的排在后面\r\n    // return [a,b].join("")-[b,a].join("");\r\n  });\r\n  return numbers.join("");\r\n}\r\n```\r\n\r\n## 33.丑数\r\n\r\n> 把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。例如 6、8 都是丑数，但 14 不是，因为它包含质因子 7。 习惯上我们把 1 当做是第一个丑数。求按从小到大的顺序的第 N 个丑数。\r\n\r\n> 解题思路：\r\n>\r\n> 首先从丑数的定义我们知道，一个丑数的因子只有 2,3,5，那么丑数 p = 2 ^ x \\* 3 ^ y \\* 5 ^ z\r\n>\r\n> 换句话说一个丑数一定由另一个丑数乘以 2 或者乘以 3 或者乘以 5 得到\r\n>\r\n> 那么我们从 1 开始乘以 2,3,5，就得到 2,3,5 三个丑数，在从这三个丑数出发乘以 2,3,5 就得到 4,6,10, 6,9,15, 10,15,25 九个丑数\r\n>\r\n> 因为这 9 个数可能会有重复的，所以从这 9 个丑数中拿出最小的数（要比丑数数组中的数大）加入丑数数组\r\n>\r\n> - (1) 丑数数组 [1]\r\n> - 乘以 2：2\r\n> - 乘以 3：3\r\n> - 乘以 5：5\r\n> - (2) 丑数数组 [1,2]\r\n> - 乘以 2：2 4\r\n> - 乘以 3：3 6\r\n> - 乘以 5：5 10\r\n> - (3) 丑数数组 [1,2,3]\r\n> - 乘以 2：2 4 6\r\n> - 乘以 3：3 6 9\r\n> - 乘以 5：5 10 15\r\n> - (4) 丑数数组 [1,2,3,4]\r\n> - 乘以 2：2 4 6 8\r\n> - 乘以 3：3 6 9 12\r\n> - 乘以 5：5 10 15 20\r\n\r\n```js\r\nfunction GetUglyNumber_Solution(index) {\r\n  // write code here\r\n  if (index === 0) return 0;\r\n  var res = [1];\r\n  while (res.length < index) {\r\n    var n1 = res.map(x => x * 2).find(x => x > res[res.length - 1]);\r\n    var n2 = res.map(x => x * 3).find(x => x > res[res.length - 1]);\r\n    var n3 = res.map(x => x * 5).find(x => x > res[res.length - 1]);\r\n    res.push(Math.min(n1, n2, n3));\r\n  }\r\n  return res[index - 1];\r\n}\r\n```\r\n\r\n## 34.第一次只出现一次的字符\r\n\r\n> 在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）\r\n>\r\n> 解题思路：\r\n>\r\n> 遍历字符串的每一个字符，判断 indexOf 和 lastIndexOf 是不是相同\r\n\r\n```js\r\nfunction FirstNotRepeatingChar(str) {\r\n  // write code here\r\n  for (let i = 0; i < str.length; i++) {\r\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n```\r\n\r\n## 35.数组中的逆序对\r\n\r\n> 在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数 P。并将 P 对 1000000007 取模的结果输出。 即输出 P%1000000007\r\n\r\n> 输入描述:\r\n>\r\n> 题目保证输入的数组中没有的相同的数字\r\n>\r\n> 数据范围：\r\n>\r\n> - 对于%50 的数据,size<=10^4\r\n>\r\n> - 对于%75 的数据,size<=10^5\r\n>\r\n> - 对于%100 的数据,size<=2\\*10^5\r\n\r\n> 输入：1,2,3,4,5,6,7,0\r\n>\r\n> 输出：7\r\n\r\n> 归并排序\r\n\r\n```js\r\nfunction InversePairs(data) {\r\n  if (!data || data.length < 2) return 0;\r\n  let copy = data.slice(),\r\n    count = 0;\r\n  count = mergeSort(data, copy, 0, data.length - 1);\r\n  return count % 1000000007;\r\n}\r\n\r\nfunction mergeSort(data, copy, start, end) {\r\n  if (end === start) return 0;\r\n  let mid = (end - start) >> 1, //这就是除以2的意思\r\n    left = mergeSort(copy, data, start, start + mid),\r\n    right = mergeSort(copy, data, start + mid + 1, end),\r\n    count = 0,\r\n    p = start + mid, //前一个数组的最后一个下标\r\n    q = end, //后一个数组的下标\r\n    copyIndex = end; //辅助数组下标，从最后一个算起\r\n  while (p >= start && q >= start + mid + 1) {\r\n    if (data[p] > data[q]) {\r\n      count += q - start - mid; //索引start+mid+1到q的值都是小于data[p]的，总共是q-(start+mid+1)+1\r\n      copy[copyIndex--] = data[p--];\r\n    } else {\r\n      copy[copyIndex--] = data[q--];\r\n    }\r\n  }\r\n  while (p >= start) {\r\n    copy[copyIndex--] = data[p--];\r\n  }\r\n  while (q >= start + mid + 1) {\r\n    copy[copyIndex--] = data[q--];\r\n  }\r\n  return left + right + count;\r\n}\r\n```\r\n\r\n## 36.两个链表的第一个公共结点\r\n\r\n> 输入两个链表，找出它们的第一个公共结点。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）\r\n\r\n> 解题思路：\r\n> 首先我们要知道什么是公共结点，两个链表从某一节点开始，他们的 next 都指向同一个结点。但由于是单向链表的结点，每个结点只有一个 next，因此从第一个公共结点开始，之后他们的所有结点都是重合的，不可能再出现分叉。\r\n>\r\n> 双指针法。创建两个指针 p1 和 p2,分别指向两个链表的头结点，然后依次往后遍历。如果某个指针到达末尾，则将该指针指向另一个链表的头结点；如果两个指针所指的结点相同，则循环结束，返回当前指针指向的结点。比如两个链表分别为：1->3->4->5->6 和 2->7->8->9->5->6。短链表的指针 p1 会先到达尾部，然后重新指向长链表头部，当长链表的指针 p2 到达尾部时，重新指向短链表头部，此时 p1 在长链表中已经多走了 k 步(k 为两个链表的长度差值)，p1 和 p2 位于同一起跑线，往后遍历找到相同结点即可。其实该方法主要就是用链表循环的方式替代了长链表指针先走 k 步这一步骤。\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\n\r\nfunction FindFirstCommonNode(pHead1, pHead2) {\r\n  // write code here\r\n  var p1 = pHead1;\r\n  var p2 = pHead2;\r\n  while (p1 !== p2) {\r\n    p1 = p1 == null ? pHead2 : p1.next;\r\n    p2 = p2 == null ? pHead1 : p2.next;\r\n  }\r\n  return p1;\r\n}\r\n```\r\n\r\n## 37.数字在排序数组中出现的次数\r\n\r\n> 统计一个数字在排序数组中出现的次数。\r\n\r\n```js\r\nfunction GetNumberOfK(data, k) {\r\n  // write code here\r\n  var count = 0;\r\n  data.forEach(ele => {\r\n    if (ele == k) {\r\n      count++;\r\n    }\r\n  });\r\n  return count;\r\n}\r\n```\r\n\r\n## 38.二叉树的深度\r\n\r\n> 输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction TreeDepth(pRoot) {\r\n  // write code here\r\n  if (pRoot === null) {\r\n    return 0;\r\n  }\r\n  var left = TreeDepth(pRoot.left);\r\n  var right = TreeDepth(pRoot.right);\r\n  return Math.max(left, right) + 1;\r\n}\r\n```\r\n\r\n## 39.平衡二叉树\r\n\r\n> 输入一棵二叉树，判断该二叉树是否是平衡二叉树。\r\n\r\n> 平衡二叉树:它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。\r\n\r\n```js\r\nfunction IsBalanced_Solution(pRoot) {\r\n  return depth(pRoot) !== -1;\r\n}\r\n\r\n// 用递归来判断root是不是平衡二叉树，如果不是则返回最大的深度，如果不是则返回-1\r\nfunction depth(root) {\r\n  if (root === null) return 0;\r\n  var left = depth(root.left);\r\n  if (left === -1) return -1;\r\n  var right = depth(root.right);\r\n  if (right === -1) return -1;\r\n  if (Math.abs(left - right) > 1) {\r\n    return -1;\r\n  } else {\r\n    return 1 + Math.max(left, right);\r\n  }\r\n}\r\n```\r\n\r\n## 40.数组中只出现一次的数字\r\n\r\n> 一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。\r\n\r\n```js\r\nfunction FindNumsAppearOnce(array) {\r\n  // write code here\r\n  // return list, 比如[a,b]，其中ab是出现一次的两个数字\r\n  var list = [];\r\n  array.forEach(item => {\r\n    if (array.indexOf(item) === array.lastIndexOf(item)) {\r\n      list.push(item);\r\n    }\r\n  });\r\n  return list;\r\n}\r\n```\r\n\r\n## 41.和为 S 的连续正数序列\r\n\r\n> 小明很喜欢数学,有一天他在做数学作业时,要求计算出 9~16 的和,他马上就写出了正确答案是 100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为 100(至少包括两个数)。没多久,他就得到另一组连续正数和为 100 的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为 S 的连续正数序列? Good Luck!\r\n\r\n> 输出描述:\r\n>\r\n> 输出所有和为 S 的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序\r\n\r\n> 解题思路：\r\n>\r\n> 因为要求连续的数列和，所以这是一个等差数列，并且我们想到用双指针来做，slow，fast。\r\n>\r\n> 等差数列：current（当前值）=(fast-slow+1)(fast+slow)/2\r\n>\r\n> 初始化 slow=1 和 fast=2.(因为考虑要覆盖到所有情况，所以赋值为两个较小的数)\r\n>\r\n> 只要满足 slow<fast,循环就可进行。\r\n>\r\n> 将 current 和 sum 进行比较\r\n>\r\n> - 若 current==sum,即 slow 和 fast 之间的数满足序列要求，所以遍历 slow 和 fast 之间的所有数，存入一个数组。**之后 slow++**（因为要求的所有的连续正数序列，所以要不断的右移，这步不能少）。\r\n> - current<slow,则表明当前值小于 sum，需要 fast++，\r\n> - current>slow,则表明当前值大于 sum，需要减小当前值，即 slow++；\r\n\r\n```js\r\nfunction FindContinuousSequence(sum) {\r\n  // write code here\r\n  var res = [];\r\n  var slow = 1;\r\n  var fast = 2; //快慢指针\r\n  while (slow < fast) {\r\n    var current = ((fast - slow + 1) * (fast + slow)) / 2;\r\n    if (current === sum) {\r\n      var temp = [];\r\n      for (let i = slow; i <= fast; i++) {\r\n        temp.push(i);\r\n      }\r\n      res.push(temp);\r\n      slow++;\r\n    } else if (current < sum) {\r\n      fast++;\r\n    } else {\r\n      slow++;\r\n    }\r\n  }\r\n  return res;\r\n}\r\n```\r\n\r\n## 42.和为 S 的两个数字\r\n\r\n> 输入一个递增排序的数组和一个数字 S，在数组中查找两个数，使得他们的和正好是 S，如果有多对数字的和等于 S，输出两个数的乘积最小的。\r\n\r\n> 输出描述:\r\n>\r\n> 对应每个测试案例，输出两个数，小的先输出。\r\n\r\n> 解题思路：\r\n>\r\n> 千万不要被题目误导了，因为数组是递增的，所有两个数乘积最小一定是两端的数，不会是中间的数，那只要用两个指针 low 和 high，初始，low 指向首部，high 指向尾部，判断：\r\n>\r\n> - 当这两个指针对应的数相加和不为 sum 而且 low 比 high 小的时后，继续判断：\r\n>\r\n> - - 如果和大于 sum，说明 high 指针对应的数太大了，high--，往前找\r\n> - - 如果和小于 sum，说明 low 指针对应的数太小了，low++，往后找\r\n> - 当这两个指针对应的数相加和为 sum 时，直接返回这两个数\r\n> - 否则返回空数组，表示不存在\r\n\r\n```js\r\nfunction FindNumbersWithSum(array, sum) {\r\n  // write code here\r\n  var low = 0; //此指针指向第一个数\r\n  var high = array.length - 1; //此指针指向第二个数\r\n  while (array[low] + array[high] !== sum && low < high) {\r\n    if (array[low] + array[high] > sum) {\r\n      high--;\r\n    } else {\r\n      low++;\r\n    }\r\n  }\r\n  if (array[low] + array[high] === sum) {\r\n    return [array[low], array[high]];\r\n  }\r\n  return [];\r\n}\r\n```\r\n\r\n## 43.左旋转字符串\r\n\r\n> 汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列 S，请你把其循环左移 K 位后的序列输出。例如，字符序列 S=”abcXYZdef”,要求输出循环左移 3 位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！\r\n\r\n> 解题思路：\r\n>\r\n> 主要是注意当 str 不存在或者当左移的位数 n 超过了字符串的长度，返回空字符串即可\r\n\r\n```js\r\nfunction LeftRotateString(str, n) {\r\n  // write code here\r\n  if (!str || n > str.length) return "";\r\n  var n = n % str.length;\r\n  return str.slice(n) + str.slice(0, n);\r\n}\r\n```\r\n\r\n## 44.翻转单词顺序列\r\n\r\n> 牛客最近来了一个新员工 Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事 Cat 对 Fish 写的内容颇感兴趣，有一天他向 Fish 借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat 对一一的翻转这些单词顺序可不在行，你能帮助他么？\r\n\r\n```js\r\nfunction ReverseSentence(str) {\r\n  // write code here\r\n  var arr = str.split(" ");\r\n  arr.reverse();\r\n  return arr.join(" ");\r\n}\r\n```\r\n\r\n## 45.扑克牌顺子\r\n\r\n> LL 今天心情特别好,因为他去买了一副扑克牌,发现里面居然有 2 个大王,2 个小王(一副牌原本是 54 张^\\_^)...他随机从中抽出了 5 张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心 A,黑桃 3,小王,大王,方片 5”,“Oh My God!”不是顺子.....LL 不高兴了,他想了想,决定大\\小 王可以看成任何数字,并且 A 看作 1,J 为 11,Q 为 12,K 为 13。上面的 5 张牌就可以变成“1,2,3,4,5”(大小王分别看作 2 和 4),“So Lucky!”。LL 决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们 LL 的运气如何， 如果牌能组成顺子就输出 true，否则就输出 false。为了方便起见,你可以认为大小王是 0。\r\n\r\n> 解题思路：\r\n>\r\n> 用一个 set 来存放数据，0 不要放进去，需要满足三个条件：\r\n>\r\n> - numbers 数组的长度为 5\r\n> - numbers 数组除 0 外不能有重复的数\r\n> - set 中最大的数与最小的数之差必须在 5 以内\r\n\r\n```js\r\nfunction IsContinuous(numbers) {\r\n  // write code here\r\n  if (numbers.length != 5) {\r\n    return false;\r\n  }\r\n  var num = 0; //记录0的个数\r\n  var set = new Set();\r\n  for (let i = 0; i < numbers.length; i++) {\r\n    if (numbers[i] === 0) {\r\n      num++;\r\n    } else {\r\n      set.add(numbers[i]);\r\n    }\r\n  }\r\n  if (num + set.size != 5) {\r\n    //有除0外的重复元素\r\n    return false;\r\n  }\r\n  if (Math.max(...set) - Math.min(...set) < 5) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n```\r\n\r\n## 46.孩子们的游戏（圈中最后剩下的数）\r\n\r\n> 每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF 作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数 m,让编号为 0 的小朋友开始报数。每次喊到 m-1 的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续 0...m-1 报数....这样下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^\\_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从 0 到 n-1)\r\n>\r\n> 如果没有小朋友，请返回-1\r\n\r\n> 解题思路：\r\n>\r\n> 用一个数组装上小朋友，[ 0, 1, 2, 3, 4, 5 ]，\r\n> 从-1 开始计数，直到发现那个小朋友，将它出列，将它后面的小朋友放到队伍前，前面的放在后。重新计数。\r\n> 如 m=4 3 出列 新队伍[ 4, 5, 0, 1, 2 ]\r\n\r\n```js\r\nfunction LastRemaining_Solution(n, m) {\r\n  // write code here\r\n  if (n == 0 || m == 0) return -1;\r\n  var i = 0;\r\n  var arr = [];\r\n  while (i < n) {\r\n    arr.push(i++);\r\n  }\r\n  var count = -1;\r\n  while (arr.length > 1) {\r\n    for (let i = 0; i < m; i++) {\r\n      count++;\r\n      if (count == arr.length) {\r\n        count = 0;\r\n      }\r\n    }\r\n    arr = arr.slice(count + 1).concat(arr.slice(0, count));\r\n    count = -1;\r\n  }\r\n  return arr[0];\r\n}\r\n```\r\n\r\n## 47.求 1+2+3+...+n\r\n\r\n> 求 1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case 等关键字及条件判断语句（A?B:C）。\r\n\r\n> 方法一：\r\n\r\n```js\r\nfunction Sum_Solution(n) {\r\n  // write code here\r\n  var sum = Math.pow(n, 2) + n;\r\n  return sum >> 1; //右移一位相当于除以二，相当于parseInt(sum/2)\r\n}\r\n```\r\n\r\n> 方法二：递归 + 短路原理\r\n\r\n```js\r\nfunction Sum_Solution(n) {\r\n  // write code here\r\n  var sum = n;\r\n  sum += sum && Sum_Solution(n - 1); //短路原理\r\n  return sum;\r\n}\r\n```\r\n\r\n## 48.不用加减乘除做加法\r\n\r\n> 写一个函数，求两个整数之和，要求在函数体内不得使用+ - \\* /四则运算符号。\r\n\r\n> 解题思路：\r\n>\r\n> 使用位运算实现加法\r\n>\r\n> 1. 一位加法\r\n>    举例： 1 + 1 = 2\r\n>    ① res1 = 1 ^ 1 = 0\r\n>    ② res2 (1 & 1) << 1 = 10\r\n>    ③ res1 = res1 ^ res2 = 10\r\n>    ④ res2 = (res1 & res2) << 1 = 0\r\n>    > 两个基本表达式：\r\n>    >\r\n>    > - 执行加法 x ^ y\r\n>    > - 进位操作 ( x & y ) << 1\r\n> 2. 二位加法\r\n>    正确的加法计算：11+01 = 100 (3 + 1 = 4)\r\n>    ① 按位加法： res1 = 11 ^ 01 = 10\r\n>    ② 与运算进位： res2 = (11 & 01) << 1 = ( 01 ) << 1 = 010\r\n>    ③ res1 = res1 ^ res2 = 10 ^ 010 = 00\r\n>    ④ res2 = (10 & 10) << 1 = 100\r\n>    ⑤ res1 = res1 ^ res2 = 00 ^ 100 = 100\r\n>    ⑥ res2 = (00 & 100) << 1 = 000\r\n>    输出 res1\r\n> 3. 更高位的加法\r\n>    继续推理可以得出三位数的加法只需重复的计算三次得到第一个表达式的值就是计算出来的结果\r\n\r\n```js\r\nfunction Add(num1, num2) {\r\n  // write code here\r\n  var res1 = num1 ^ num2; //异或 不带进位的加法\r\n  var res2 = (num1 & num2) << 1; //按位与 进位\r\n  while (res2 !== 0) {\r\n    [res1, res2] = [res1 ^ res2, (res1 & res2) << 1];\r\n  }\r\n  return res1;\r\n}\r\n```\r\n\r\n## 49.把字符串转换成整数\r\n\r\n> 将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为 0 或者字符串不是一个合法的数值则返回 0\r\n\r\n> 输入描述：输入一个字符串,包括数字字母符号,可以为空\r\n\r\n> 输出描述：如果是合法的数值表达则返回该数字，否则返回 0\r\n\r\n> 输入\r\n>\r\n> +2147483647\r\n>\r\n> 1a33\r\n\r\n> 输出\r\n>\r\n> 2147483647\r\n>\r\n> 0\r\n\r\n```js\r\nfunction StrToInt(str) {\r\n  // write code here\r\n  var obj = {\r\n    "1": 1,\r\n    "2": 2,\r\n    "3": 3,\r\n    "4": 4,\r\n    "5": 5,\r\n    "6": 6,\r\n    "7": 7,\r\n    "8": 8,\r\n    "9": 9,\r\n    "0": 0,\r\n    "-": -1,\r\n    "+": 1\r\n  };\r\n  for (let i = 0; i < str.length; i++) {\r\n    if (!obj[str[i]]) {\r\n      return 0;\r\n    }\r\n  }\r\n  if (str === "+" || str === "-") return 0;\r\n  var num = str / 1;\r\n  if (num === -2147483649 || num === 2147483648) {\r\n    return 0;\r\n  }\r\n  return num;\r\n}\r\n```\r\n\r\n## 50.数组中重复的数字\r\n\r\n> 在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为 7 的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字 2。\r\n\r\n```js\r\nfunction duplicate(numbers, duplication) {\r\n  // write code here\r\n  //这里要特别注意~找到任意重复的一个值并赋值到duplication[0]\r\n  //函数返回True/False\r\n  if (!numbers || numbers.length == 0) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < numbers.length; i++) {\r\n    var num = numbers[i];\r\n    if (numbers.indexOf(num) !== numbers.lastIndexOf(num)) {\r\n      duplication[0] = num;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n```\r\n\r\n## 51.构建乘积数组\r\n\r\n> 给定一个数组 A[0,1,...,n-1],请构建一个数组 B[0,1,...,n-1],其中 B 中的元素 B[i]=A[0]\\*A[1]\\*...\\*A[i-1]\\*A[i+1]\\*...\\*A[n-1]。不能使用除法。（注意：规定 B[0] = A[1] \\* A[2] \\* ... \\* A[n-1]，B[n-1] = A[0] \\* A[1] \\* ... \\* A[n-2];）\r\n\r\n```js\r\nfunction multiply(array) {\r\n  // write code here\r\n  var b = [];\r\n  array.forEach((ele, index) => {\r\n    var arr = Array.from(array);\r\n    b[index] = arrMul(arr, index);\r\n  });\r\n  return b;\r\n}\r\n\r\n//数组除了索引为idx的其余数的乘积和\r\nfunction arrMul(array, idx) {\r\n  var sum = 1;\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (i == idx) {\r\n      continue;\r\n    } else {\r\n      sum *= array[i];\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n```\r\n\r\n## 52.正则表达式匹配\r\n\r\n> 请实现一个函数用来匹配包括\'.\'和\'\\*\'的正则表达式。模式中的字符\'.\'表示任意一个字符，而\'\\*\'表示它前面的字符可以出现任意次（包含 0 次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab\\*ac\\*a"匹配，但是与"aa.a"和"ab\\*a"均不匹配\r\n\r\n```js\r\n//s, pattern都是字符串\r\nfunction match(s, pattern) {\r\n  // write code here\r\n  var reg = new RegExp("^" + pattern + "$", "g");\r\n  return reg.test(s);\r\n}\r\n```\r\n\r\n## 53.表示数值的字符串\r\n\r\n> 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串"+100","5e2","-123","3.1416"和"-1E-16"都表示数值。 但是"12e","1a3.14","1.2.3","+-5"和"12e+4.3"都不是。\r\n\r\n> 解题思路：\r\n>\r\n> - [-+]? 表示有 0 到 1 个负号或者正号\r\n> - \\d\\* 表示有 0 到多个数字\r\n> - (?:\\.\\d\\*)? 表示后面是不是紧跟着小数点和数字，(?: …)?表示一个可选的非捕获型分组。\r\n> - (?:[eE][+\\\\-]?\\d+)? 表示匹配一个 e(或 E)、一个可选的正负号以及一个或多个数字。\r\n\r\n```js\r\n//s字符串\r\nfunction isNumeric(s) {\r\n  // write code here\r\n  var reg = /^[+\\-]?\\d*(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?$/g;\r\n  return reg.test(s);\r\n}\r\n```\r\n\r\n## 54.字符流中第一个不重复的字符\r\n\r\n> 请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符"go"时，第一个只出现一次的字符是"g"。当从该字符流中读出前六个字符“google"时，第一个只出现一次的字符是"l"。\r\n>\r\n> 如果当前字符流没有存在出现一次的字符，返回#字符。\r\n\r\n```js\r\nvar map = {};\r\n//Init module if you need\r\nfunction Init() {\r\n  // write code here\r\n  map = {};\r\n}\r\n//Insert one char from stringstream\r\nfunction Insert(ch) {\r\n  // write code here\r\n  map[ch] = map[ch] ? map[ch] + 1 : 1;\r\n}\r\n//return the first appearence once char in current stringstream\r\nfunction FirstAppearingOnce() {\r\n  // write code here\r\n  for (let i in map) {\r\n    if (map[i] === 1) {\r\n      return i;\r\n    }\r\n  }\r\n  return "#";\r\n}\r\n```\r\n\r\n## 55.链表中环的入口结点\r\n\r\n> 给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出 null。\r\n\r\n> 方法一：\r\n>\r\n> 遍历这个链表，将结点存入数组中，给每次加入的结点做一个判断：是否这个结点已经保存在数组，如果保存过，说明这个结点就是环的入口节点\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\n\r\nfunction EntryNodeOfLoop(pHead) {\r\n  // write code here\r\n  if (!pHead) return null;\r\n  var arr = [];\r\n  var node = pHead;\r\n  while (node) {\r\n    if (arr.includes(node)) {\r\n      return node;\r\n    }\r\n    arr.push(node);\r\n    node = node.next;\r\n  }\r\n  return null;\r\n}\r\n```\r\n\r\n> 方法二：\r\n>\r\n> ![链表中环的入口结点](./img/链表中环的入口结点.jpg)\r\n>\r\n> 设置快慢指针，都从链表头出发，快指针每次走两步，慢指针一次走一步，假如有环，一定相遇于环中某点(结论 1)。接着让两个指针分别从相遇点和链表头出发，两者都改为每次走一步，最终相遇于环入口(结论 2)。以下是两个结论证明：\r\n> 两个结论：\r\n>\r\n> 1.  设置快慢指针，假如有环，他们最后一定相遇。\r\n> 2.  两个指针分别从链表头和相遇点继续出发，每次走一步，最后一定相遇与环入口。\r\n>\r\n> **证明结论 1:**\r\n>\r\n> 设置快慢指针 fast 和 slow，fast 每次走两步，slow 每次走一步。假如有环，两者一定会相遇（因为 slow 一旦进环，可看作 fast 在后面追赶 slow 的过程，每次两者都接近一步，最后一定能追上）。\r\n>\r\n> **证明结论 2:**\r\n>\r\n> 设：\r\n>\r\n> - 链表头到环入口长度为--a\r\n> - 环入口到相遇点长度为--b\r\n> - 相遇点到环入口长度为--c\r\n>\r\n> 则：相遇时\r\n>\r\n> **快指针路程=a+(b+c)k+b** ，k>=1 其中 b+c 为环的长度，k 为绕环的圈数（k>=1,即最少一圈，不能是 0 圈，不然和慢指针走的一样长，矛盾）。\r\n>\r\n> **慢指针路程=a+b**\r\n>\r\n> 快指针走的路程是慢指针的两倍，所以：\r\n>\r\n> （a+b）\\*2=a+(b+c)k+b\r\n>\r\n> 化简可得：\r\n>\r\n> a=(k-1)(b+c)+c 这个式子的意思是： **链表头到环入口的距离=相遇点到环入口的距离+（k-1）圈环长度。**其中 k>=1,所以 k-1>=0 圈。所以两个指针分别从链表头和相遇点出发，最后一定相遇于环入口。\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\n\r\nfunction EntryNodeOfLoop(pHead) {\r\n  // write code here\r\n  if (pHead == null) {\r\n    return null;\r\n  }\r\n  if (pHead.next == null) {\r\n    return null;\r\n  }\r\n  var fast = pHead;\r\n  var slow = pHead;\r\n  while (slow != null && fast.next != null) {\r\n    slow = slow.next;\r\n    fast = fast.next.next;\r\n    if (fast == slow) break;\r\n  }\r\n\r\n  var p1 = slow;\r\n  var p2 = pHead;\r\n  while (p1 != p2) {\r\n    p1 = p1.next;\r\n    p2 = p2.next;\r\n  }\r\n  return p1;\r\n}\r\n```\r\n\r\n## 56.删除链表中重复的结点\r\n\r\n> 在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表 1->2->3->3->4->4->5 处理后为 1->2->5\r\n\r\n> 解题思路：\r\n>\r\n> 借助一个辅助头节点，设置两个指针 pre 和 cur 分别指向上一个结点和当前结点，当 cur 的值和 cur.next 的值相等就让 cur 往前走，直到不相等的时候退出循环，这时候 cur 还是重复值，令 cur 再往前走一位，调整 pre 和 cur 再次进行判断。\r\n>\r\n> 举例：1->2->3->3->3->4->5 两个指针的走向如下\r\n>\r\n> - -1(辅助头结点)->1->2->3->3->3->4->5\r\n> - -1(pre)->1(cur)->2->3->3->3->4->5\r\n> - -1->1(pre)->2(cur)->3->3->3->4->5\r\n> - -1->1->2(pre)->3(cur)->3->3->4->5\r\n> - -1->1->2(pre)->3->3(cur)->3->4->5\r\n> - -1->1->2(pre)->3->3->3(cur)->4->5\r\n> - -1->1->2(pre)->3->3->3->4(cur)->5\r\n> - -1->1->2(pre)->4(cur)->5\r\n> - -1->1->2->4(pre)->5(cur)\r\n\r\n```js\r\n/*function ListNode(x){\r\n    this.val = x;\r\n    this.next = null;\r\n}*/\r\n\r\nfunction deleteDuplication(pHead) {\r\n  // write code here\r\n  if (!pHead) return null;\r\n  var head = new ListNode(-1); //辅助头节点\r\n  head.next = pHead;\r\n  var pre = head;\r\n  var cur = head.next;\r\n  while (cur !== null) {\r\n    if (cur.next !== null && cur.next.val === cur.val) {\r\n      while (cur.next !== null && cur.next.val === cur.val) {\r\n        cur = cur.next;\r\n      }\r\n      cur = cur.next;\r\n      pre.next = cur;\r\n    } else {\r\n      pre = cur;\r\n      cur = cur.next;\r\n    }\r\n  }\r\n  return head.next;\r\n}\r\n```\r\n\r\n## 57.二叉树的下一个结点\r\n\r\n> 给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。\r\n\r\n> 解题思路：\r\n>\r\n> 分析二叉树的下一个节点，一共有以下情况：\r\n>\r\n> 1.二叉树为空，则返回空；\r\n>\r\n> 2.有右子树的，那么下个结点就是右子树最左边的点\r\n>\r\n> 3.没有右子树的，也可以分成两类:\r\n>\r\n> - 是父节点左孩子,那么父节点就是下一个节点\r\n> - 是父节点的右孩子,找他的父节点的父节点的父节点...直到当前结点是其父节点的左孩子位置,下一个结点就是当前结点\r\n\r\n```js\r\n/*function TreeLinkNode(x){\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n    this.next = null;\r\n}*/\r\n\r\nfunction GetNext(pNode) {\r\n  // write code here\r\n  if (pNode === null) return null; //空结点\r\n  var p = null;\r\n  if (pNode.right) {\r\n    //有右子树，则下一个结点在右子树最左边的结点\r\n    p = pNode.right;\r\n    while (p.left !== null) {\r\n      p = p.left;\r\n    }\r\n    return p;\r\n  } else {\r\n    //没有右子树\r\n    p = pNode.next;\r\n    if (p && p.right === pNode) {\r\n      while (p.next && p.next.right === p) {\r\n        p = p.next;\r\n      }\r\n      p = p.next;\r\n    }\r\n    return p;\r\n  }\r\n  return null;\r\n}\r\n```\r\n\r\n## 58.对称的二叉树\r\n\r\n> 请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。空二叉树也是对称的。\r\n\r\n> 解题思路：\r\n>\r\n> 空二叉树也是对称的，这是值得注意的点。\r\n>\r\n> 然后将二叉树一层一层比较一下\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction isSymmetrical(pRoot) {\r\n  // write code here\r\n  if (!pRoot) return true; // 注意是true\r\n  return judge(pRoot.left, pRoot.right);\r\n}\r\n\r\nfunction judge(node1, node2) {\r\n  //判断这两个结点以及子节点是否对称\r\n  if (node1 === null && node2 === null) {\r\n    return true;\r\n  } else if (node1 === null || node2 === null) {\r\n    return false;\r\n  }\r\n  if (node1.val !== node2.val) {\r\n    return false;\r\n  } else {\r\n    return judge(node1.left, node2.right) && judge(node1.right, node2.left);\r\n  }\r\n}\r\n```\r\n\r\n## 59.按之字形顺序打印二叉树\r\n\r\n> 请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction Print(pRoot) {\r\n  // write code here\r\n  if (!pRoot) return [];\r\n  const nodes = []; //结点\r\n  const vals = []; //val\r\n  var flag = true; //true代表顺序打印\r\n  nodes.push(pRoot);\r\n  while (nodes.length) {\r\n    var temp = [];\r\n    var len = nodes.length; //这里注意要先把nodes的长度赋值给一个变量，因为下面循环中nodes里会添加新的结点\r\n    for (let i = 0; i < len; i++) {\r\n      var node = nodes.shift(); //每次弹出nodes中第一个结点\r\n      flag === true ? temp.push(node.val) : temp.unshift(node.val);\r\n      if (node.left) {\r\n        nodes.push(node.left);\r\n      }\r\n      if (node.right) {\r\n        nodes.push(node.right);\r\n      }\r\n    }\r\n    flag = !flag;\r\n    vals.push(temp);\r\n  }\r\n  return vals;\r\n}\r\n```\r\n\r\n## 60.把二叉树打印成多行\r\n\r\n> 从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nfunction Print(pRoot) {\r\n  // write code here\'\r\n  if (!pRoot) return [];\r\n  const nodes = [];\r\n  const vals = [];\r\n  nodes.push(pRoot);\r\n  while (nodes.length) {\r\n    var len = nodes.length;\r\n    var temp = [];\r\n    for (let i = 0; i < len; i++) {\r\n      var node = nodes.shift();\r\n      temp.push(node.val);\r\n      if (node.left) {\r\n        nodes.push(node.left);\r\n      }\r\n      if (node.right) {\r\n        nodes.push(node.right);\r\n      }\r\n    }\r\n    vals.push(temp);\r\n  }\r\n  return vals;\r\n}\r\n```\r\n\r\n## 61. 序列化二叉树\r\n\r\n> 请实现两个函数，分别用来序列化和反序列化二叉树\r\n>\r\n> 二叉树的序列化是指：把一棵二叉树按照某种遍历方式的结果以某种格式保存为字符串，从而使得内存中建立起来的二叉树可以持久保存。序列化可以基于先序、中序、后序、层序的二叉树遍历方式来进行修改，序列化的结果是一个字符串，序列化时通过 某种符号表示空节点（#），以 ！ 表示一个结点值的结束（value!）。\r\n>\r\n> 二叉树的反序列化是指：根据某种遍历顺序得到的序列化字符串结果 str，重构二叉树。\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\n\r\nvar arr = [];\r\nfunction Serialize(pRoot) {\r\n  // write code here\r\n  if (!pRoot) {\r\n    arr.push("#");\r\n  } else {\r\n    arr.push(pRoot.val);\r\n    Serialize(pRoot.left);\r\n    Serialize(pRoot.right);\r\n  }\r\n}\r\nfunction Deserialize(s) {\r\n  // write code here\r\n  if (arr === null) return null;\r\n  if (arr.length < 1) return null;\r\n  var root = null;\r\n  var temp = arr.shift();\r\n  if (typeof temp === "number") {\r\n    root = new TreeNode(temp);\r\n    root.left = Deserialize(arr);\r\n    root.right = Deserialize(arr);\r\n  }\r\n  return root;\r\n}\r\n```\r\n\r\n## 62.二叉搜索树的第 k 个结点\r\n\r\n> 给定一棵二叉搜索树，请找出其中的第 k 小的结点。例如， （5，3，7，2，4，6，8） 中，按结点数值大小顺序第三小结点的值为 4。\r\n\r\n> 解题思路：\r\n>\r\n> 二叉搜索树的特性：左子树 < 根节点 < 右子树\r\n>\r\n> 故只需要找出二叉搜索树的中序，然后找第 k 个结点\r\n\r\n```js\r\n/* function TreeNode(x) {\r\n    this.val = x;\r\n    this.left = null;\r\n    this.right = null;\r\n} */\r\nfunction KthNode(pRoot, k) {\r\n  // write code here\r\n  if (!pRoot || k < 1) {\r\n    return null;\r\n  }\r\n  var res = [];\r\n  function mid(root) {\r\n    if (!root) return null;\r\n    mid(root.left);\r\n    res.push(root);\r\n    mid(root.right);\r\n  }\r\n  mid(pRoot);\r\n  return res[k - 1];\r\n}\r\n```\r\n\r\n## 63.数据流中的中位数\r\n\r\n> 如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用 Insert()方法读取数据流，使用 GetMedian()方法获取当前读取数据的中位数。\r\n\r\n```js\r\nvar arr = [];\r\nfunction Insert(num) {\r\n  // write code here\r\n  arr.push(num);\r\n  let i = arr.length - 1;\r\n  arr.sort((a, b) => a - b);\r\n}\r\nfunction GetMedian() {\r\n  // write code here\r\n  if (!arr.length) return null;\r\n  var len = arr.length;\r\n  var idx = Math.floor(len / 2);\r\n  if (len % 2 === 1) {\r\n    return arr[idx];\r\n  } else {\r\n    return (arr[idx] + arr[idx - 1]) / 2;\r\n  }\r\n}\r\n```\r\n\r\n## 64.滑动窗口的最大值\r\n\r\n> 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小 3，那么一共存在 6 个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下 6 个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。\r\n\r\n```js\r\nfunction maxInWindows(num, size) {\r\n  // write code here\r\n  if (size == 0) return [];\r\n  var len = num.length;\r\n  var idx = len - size;\r\n  var res = [];\r\n  for (let i = 0; i <= idx; i++) {\r\n    var temp = num;\r\n    res.push(Math.max(...temp.slice(i, i + size)));\r\n  }\r\n  return res;\r\n}\r\n```\r\n\r\n## 65.矩阵中的路径\r\n\r\n> 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 ​\r\n>\r\n> a s a\r\n> ​\r\n> b f d\r\n> ​\r\n> c c e\r\n>\r\n> e s e\r\n> ​\r\n> 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，因为字符串的第一个字符 b 占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。\r\n\r\n```js\r\nfunction hasPath(matrix, rows, cols, path) {\r\n  // matrix是一个一位数组\r\n  if (!rows || !cols || path.length > rows * cols) return false;\r\n  var k = 0;\r\n  var flag = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < cols; j++) {\r\n      if (move(matrix, i, j, rows, cols, k, path, flag)) return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction move(matrix, i, j, rows, cols, k, path, flag) {\r\n  //(i,j)代表在矩阵中的位置，k是path字符串的索引，flag是用来标记(i,j)是否已经走过\r\n  var index = i * cols + j; //index表示(i,j)在matrix数组中的索引\r\n  if (i < 0 || i >= rows || j < 0 || j >= cols) return false; //超出边界\r\n  if (path[k] !== matrix[index]) return false; //跟path字符串不相符合\r\n  if (flag[index] === 1) return false; //已经走过\r\n  if (k === path.length - 1) return true;\r\n  走完最后一步;\r\n  flag[index] = 1; //标记已经走过\r\n  if (\r\n    move(matrix, i - 1, j, rows, cols, k + 1, path, flag) ||\r\n    move(matrix, i + 1, j, rows, cols, k + 1, path, flag) ||\r\n    move(matrix, i, j - 1, rows, cols, k + 1, path, flag) ||\r\n    move(matrix, i, j + 1, rows, cols, k + 1, path, flag)\r\n  ) {\r\n    return true;\r\n  }\r\n  flag[index] = 0; //说明此步走的不正确，不标记此步走过\r\n  return false;\r\n}\r\n```\r\n\r\n## 66.机器人的运动范围\r\n\r\n> 地上有一个 m 行和 n 列的方格。一个机器人从坐标 0,0 的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于 k 的格子。 例如，当 k 为 18 时，机器人能够进入方格（35,37），因为 3+5+3+7 = 18。但是，它不能进入方格（35,38），因为 3+5+3+8 = 19。请问该机器人能够达到多少个格子？\r\n\r\n```js\r\nfunction movingCount(threshold, rows, cols) {\r\n  // write code here\r\n  function move(i, j, threshold, rows, cols, flag) {\r\n    var index = i * cols + j;\r\n    //无论是广度优先遍历还是深度优先遍历，我们一定要知道的时候遍历一定会有终止条件也就是要能够停止，\r\n    //不然程序就会陷入死循环，这个一定是我们做此类题目必须要注意的地方\r\n    if (i < 0 || i >= rows || j < 0 || j >= cols) return 0; //超出边界\r\n    if (flag[index] === 1) return 0; //已走过\r\n    if (isValid(i, j, threshold) === false) return 0; //不满足行坐标和列坐标的数位之和大于threshold\r\n    flag[index] = 1; //(i, j)满足要求，标记已走过，走过次数+1\r\n    return (\r\n      1 +\r\n      move(i - 1, j, threshold, rows, cols, flag) +\r\n      move(i + 1, j, threshold, rows, cols, flag) +\r\n      move(i, j - 1, threshold, rows, cols, flag) +\r\n      move(i, j + 1, threshold, rows, cols, flag)\r\n    );\r\n  }\r\n  var flag = [];\r\n  return move(0, 0, threshold, rows, cols, flag);\r\n}\r\n\r\nfunction isValid(i, j, threshold) {\r\n  var sum = 0;\r\n  while (i > 0) {\r\n    sum += i % 10;\r\n    i = parseInt(i / 10);\r\n  }\r\n  while (j > 0) {\r\n    sum += j % 10;\r\n    j = parseInt(j / 10);\r\n  }\r\n  if (sum > threshold) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n```\r\n\r\n## 67.减绳子\r\n\r\n> 给你一根长度为 n 的绳子，请把绳子剪成整数长的 m 段（m、n 都是整数，n>1 并且 m>1），每段绳子的长度记为 k[0],k[1],...,k[m]。请问 k[0]xk[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。\r\n\r\n> 输入描述:输入一个数 n，意义见题面。（2 <= n <= 60）\r\n>\r\n> 输出描述:输出答案。\r\n\r\n> 输入: 8\r\n>\r\n> 输出: 18\r\n\r\n> 方法一：数学公式法（贪婪算法）\r\n\r\n> 解题思路：\r\n>\r\n> 绳子长度为 n，分成 m 份，\r\n>\r\n> 假设每份长度为 x，那么 m=n/x;\r\n>\r\n> 那么结果就是 f(x)=x^(n/x)\r\n> ![剪绳子](./img/剪绳子.jpg)\r\n> 所以问题就回到了 n/3 的个数上面\r\n>\r\n> 当 n 能被 3 整除的时候，乘积=n^(n/3)\r\n>\r\n> 当 n 除 3 余 1 的时候，这时候发现多了一个 1，这个 1 是不是很鸡肋，但是把前面的一个 3 拿出来，把这个一个 1 和前面一个 3 分解为 2 和 2，就变大了，所以乘积为 3^(n/3 - 1) \\* 4\r\n>\r\n> 当 n 除 3 余 2 的时候，乘积为 n^(n/3) \\* 2\r\n\r\n```js\r\nfunction cutRope(number) {\r\n  // write code here\r\n  if (number <= 1) return 0;\r\n  if (number === 2) return 1;\r\n  if (number === 3) return 2;\r\n  var m = number % 3;\r\n  switch (m) {\r\n    case 0:\r\n      return Math.pow(3, number / 3);\r\n    case 1:\r\n      return Math.pow(3, parseInt(number / 3) - 1) * 4;\r\n    case 2:\r\n      return Math.pow(3, parseInt(number / 3)) * 2;\r\n  }\r\n}\r\n```\r\n\r\n> 方法二：动态规划 DP\r\n\r\n```js\r\nfunction cutRope(number) {\r\n  // write code here\r\n  if (number <= 1) return 0;\r\n  if (number === 2) return 1;\r\n  if (number === 3) return 2;\r\n  var arr = [0, 1, 2, 3];\r\n  for (let i = 4; i <= number; i++) {\r\n    var max = 0;\r\n    for (let j = 1; j <= parseInt(number / 2); j++) {\r\n      var max = 0;\r\n      max = Math.max(arr[j] * arr[i - j], max);\r\n      arr.push(max);\r\n    }\r\n  }\r\n  return arr[arr.length - 1];\r\n}\r\n```\r\n'}});